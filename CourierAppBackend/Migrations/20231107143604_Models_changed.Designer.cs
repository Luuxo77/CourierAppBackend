// <auto-generated />
using System;
using CourierAppBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CourierAppBackend.Migrations
{
    [DbContext(typeof(CourierAppContext))]
    [Migration("20231107143604_Models_changed")]
    partial class Models_changed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CourierAppBackend.Models.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("ApartmentNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("CourierAppBackend.Models.Inquiry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("DateOfInquiring")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DeliveryAtWeekend")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DestinationAddressID")
                        .HasColumnType("integer");

                    b.Property<bool>("HighPriority")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompany")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PickupDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SourceAddressID")
                        .HasColumnType("integer");

                    b.Property<int?>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("DestinationAddressID");

                    b.HasIndex("SourceAddressID");

                    b.HasIndex("UserID");

                    b.ToTable("Inquiries");
                });

            modelBuilder.Entity("CourierAppBackend.Models.Offer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DeliveryAtWeekend")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DestinationAddressID")
                        .HasColumnType("integer");

                    b.Property<bool>("HighPriority")
                        .HasColumnType("boolean");

                    b.Property<int>("InquiryID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PickupDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SourceAddressID")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ID");

                    b.HasIndex("DestinationAddressID");

                    b.HasIndex("SourceAddressID");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("CourierAppBackend.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("AddressID")
                        .HasColumnType("integer");

                    b.Property<int>("DefaultSourceAddressID")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.HasIndex("DefaultSourceAddressID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CourierAppBackend.Models.Inquiry", b =>
                {
                    b.HasOne("CourierAppBackend.Models.Address", "DestinationAddress")
                        .WithMany()
                        .HasForeignKey("DestinationAddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourierAppBackend.Models.Address", "SourceAddress")
                        .WithMany()
                        .HasForeignKey("SourceAddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourierAppBackend.Models.User", null)
                        .WithMany("Inquiries")
                        .HasForeignKey("UserID");

                    b.OwnsOne("CourierAppBackend.Models.Package", "Package", b1 =>
                        {
                            b1.Property<int>("InquiryID")
                                .HasColumnType("integer");

                            b1.Property<int>("Height")
                                .HasColumnType("integer");

                            b1.Property<int>("Length")
                                .HasColumnType("integer");

                            b1.Property<float>("Weight")
                                .HasColumnType("real");

                            b1.Property<int>("Width")
                                .HasColumnType("integer");

                            b1.HasKey("InquiryID");

                            b1.ToTable("Inquiries");

                            b1.WithOwner()
                                .HasForeignKey("InquiryID");
                        });

                    b.Navigation("DestinationAddress");

                    b.Navigation("Package")
                        .IsRequired();

                    b.Navigation("SourceAddress");
                });

            modelBuilder.Entity("CourierAppBackend.Models.Offer", b =>
                {
                    b.HasOne("CourierAppBackend.Models.Address", "DestinationAddress")
                        .WithMany()
                        .HasForeignKey("DestinationAddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourierAppBackend.Models.Address", "SourceAddress")
                        .WithMany()
                        .HasForeignKey("SourceAddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("CourierAppBackend.Models.Package", "Package", b1 =>
                        {
                            b1.Property<int>("OfferID")
                                .HasColumnType("integer");

                            b1.Property<int>("Height")
                                .HasColumnType("integer");

                            b1.Property<int>("Length")
                                .HasColumnType("integer");

                            b1.Property<float>("Weight")
                                .HasColumnType("real");

                            b1.Property<int>("Width")
                                .HasColumnType("integer");

                            b1.HasKey("OfferID");

                            b1.ToTable("Offers");

                            b1.WithOwner()
                                .HasForeignKey("OfferID");
                        });

                    b.OwnsOne("CourierAppBackend.Models.Price", "Price", b1 =>
                        {
                            b1.Property<int>("OfferID")
                                .HasColumnType("integer");

                            b1.Property<float>("Fees")
                                .HasColumnType("real");

                            b1.Property<float>("FullPrice")
                                .HasColumnType("real");

                            b1.Property<float>("Taxes")
                                .HasColumnType("real");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("OfferID");

                            b1.ToTable("Offers");

                            b1.WithOwner()
                                .HasForeignKey("OfferID");
                        });

                    b.Navigation("DestinationAddress");

                    b.Navigation("Package")
                        .IsRequired();

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("SourceAddress");
                });

            modelBuilder.Entity("CourierAppBackend.Models.User", b =>
                {
                    b.HasOne("CourierAppBackend.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourierAppBackend.Models.Address", "DefaultSourceAddress")
                        .WithMany()
                        .HasForeignKey("DefaultSourceAddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("DefaultSourceAddress");
                });

            modelBuilder.Entity("CourierAppBackend.Models.User", b =>
                {
                    b.Navigation("Inquiries");
                });
#pragma warning restore 612, 618
        }
    }
}
